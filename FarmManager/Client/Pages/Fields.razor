@page "/fields"
@using FarmManager.Shared
@using FarmManager.Shared.Models
@inject HttpClient Http

<PageTitle>Fields</PageTitle>

<h1>Fields</h1>

<div class="row">
    <div class="col-md-6">
        <a href='/field/add' class="btn btn-primary" role="button">
            <i class="oi oi-plus"></i>
            Add Field
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search field by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="oi oi-reload"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (fields == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var field in fields)
            {
                <tr>
                    <td>@field.Id</td>
                    <td>@field.Name</td>
                    <td>
                        <a href='/field/edit/@field.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/field/delete/@field.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Field>? fields;
    protected List<Field> searchFieldData = new();
    protected Field? field = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        fields = await Http.GetFromJsonAsync<List<Field>>("api/fields") ?? new();
        searchFieldData = fields;
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            fields = searchFieldData
                .Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            fields = searchFieldData;
        }
    }
    protected void DeleteConfirm(Guid fieldId)
    {
        field = fields?.FirstOrDefault(x => x.Id == fieldId);
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        fields = searchFieldData;
    }
}

